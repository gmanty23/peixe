import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib import cm
from PIL import Image

# --- CONFIGURACIÓN ---
bboxes_folder = "/home/gmanty/code/output_20s_stats/output_20s/yolo_results/tracking_pez/labels"
save_path     = "/home/gmanty/code/output_20s_stats/output_20s"
imgs_path     = "/home/gmanty/code/output_20s_stats/output_20s/images_yolov8"
grid_size     = 10
output_heatmap_video = os.path.join(save_path, "histograma_heatmap_10_n.mp4")
output_overlay_video = os.path.join(save_path, "histograma_overlay.mp4")

# --- CARGAR HISTOGRAMA ---
histograma = np.load(os.path.join(save_path, "output_20s_10.npy"))
n_frames = histograma.shape[0]

# --- CARGAR IMÁGENES ---
img_files = sorted([f for f in os.listdir(imgs_path) if f.endswith((".png", ".jpg", ".jpeg"))])
img_example = np.array(Image.open(os.path.join(imgs_path, img_files[0])))
img_height, img_width = img_example.shape[:2]

# --- FUNCIONES DE ANIMACIÓN ---

def animar_heatmap():
    fig, ax = plt.subplots()
    im = ax.imshow(histograma[0], cmap='hot', interpolation='nearest', vmin=0)
    text_objs = []

    # Inicializar los textos
    for i in range(grid_size):
        for j in range(grid_size):
            text = ax.text(j, i, str(histograma[0][i, j]),
                           ha='center', va='center', color='white', fontsize=8)
            text_objs.append(text)

    def update(frame):
        im.set_array(histograma[frame])
        ax.set_title(f"Frame {frame}")

        for idx, text in enumerate(text_objs):
            i = idx // grid_size
            j = idx % grid_size
            count = histograma[frame][i, j]
            text.set_text(str(count) if count > 0 else "")
        return [im] + text_objs

    ani = FuncAnimation(fig, update, frames=n_frames, blit=True)
    ani.save(output_heatmap_video, fps=10)
    print(f"🎥 Heatmap guardado en {output_heatmap_video}")
    plt.close()


def animar_con_overlay():
    fig, ax = plt.subplots()
    img_disp = ax.imshow(img_example)
    heat_disp = ax.imshow(np.zeros((img_height, img_width)), cmap='hot', alpha=0.5, interpolation='nearest', vmin=0)
    ax.axis('off')

    text_objs = []
    cell_h = img_height // grid_size
    cell_w = img_width // grid_size

    # Inicializar textos
    for i in range(grid_size):
        for j in range(grid_size):
            x = j * cell_w + cell_w // 2
            y = i * cell_h + cell_h // 2
            text = ax.text(x, y, "", ha='center', va='center', color='white', fontsize=8)
            text_objs.append(text)

    def update(frame):
        img = np.array(Image.open(os.path.join(imgs_path, img_files[frame])))
        heat = np.kron(histograma[frame], np.ones((cell_h, cell_w)))

        img_disp.set_data(img)
        heat_disp.set_array(heat)
        ax.set_title(f"Frame {frame}")

        for idx, text in enumerate(text_objs):
            i = idx // grid_size
            j = idx % grid_size
            count = histograma[frame][i, j]
            text.set_text(str(count) if count > 0 else "")
        return [img_disp, heat_disp] + text_objs

    ani = FuncAnimation(fig, update, frames=n_frames, blit=True)
    ani.save(output_overlay_video, fps=10)
    print(f"🎥 Overlay con imágenes guardado en {output_overlay_video}")
    plt.close()


# --- EJECUCIÓN ---
animar_heatmap()
animar_con_overlay()
