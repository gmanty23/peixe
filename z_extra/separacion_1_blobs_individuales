import cv2
import numpy as np
import os
from pathlib import Path
from PIL import Image
from natsort import natsorted  # Para ordenar naturalmente archivos como frame_1, frame_2, ...

# Ruta del directorio con las máscaras por frame
input_dir = Path("/home/gms/AnemoNAS/Workspace/or_masks/")
output_dir = Path("/home/gms/AnemoNAS/Workspace/seg_y_track/blob_individuales/")
output_dir.mkdir(parents=True, exist_ok=True)

# Obtener todos los archivos de imagen en orden natural
mask_files = natsorted(input_dir.glob("*.png"))

for frame_idx, mask_path in enumerate(mask_files):
    # Cargar máscara en escala de grises
    mask = cv2.imread(str(mask_path), cv2.IMREAD_GRAYSCALE)
    _, binary_mask = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)

    # Detectar blobs
    num_labels, labels, stats, _ = cv2.connectedComponentsWithStats(binary_mask, connectivity=8)

    for i in range(1, num_labels):  # saltar fondo
        x, y, w, h, area = stats[i]
        if area < 50:
            continue

        blob_mask = (labels[y:y+h, x:x+w] == i).astype(np.uint8) * 255
        blob_image = Image.fromarray(blob_mask)

        # Guardar con nombre indicando frame y número de blob
        frame_num = int(mask_path.stem.split('_')[-1])  # extrae el número del nombre
        blob_filename = output_dir / f"blob_f{frame_num:04d}_b{i:03d}.png"
        blob_image.save(blob_filename)

print("Blobs procesados y guardados con referencia al frame.")